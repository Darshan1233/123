Got it üëç. The reason you‚Äôre getting ‚Äúbooking not found‚Äù for every record is usually because of wrong id handling in edit/update operations.
Let‚Äôs fix it step by step and I‚Äôll give you the complete corrected code for:

List Component (manage bookings, edit/delete)

Form Component (add/update booking)

Service (CRUD calls)

Routing & Guard



---

1. Booking Service (booking.service.ts)

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class BookingService {
  private apiUrl = 'http://localhost:3000/bookings';

  constructor(private http: HttpClient) {}

  getBookings(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl);
  }

  getBookingById(id: number): Observable<any> {
    return this.http.get<any>(`${this.apiUrl}/${id}`);
  }

  addBooking(booking: any): Observable<any> {
    return this.http.post<any>(this.apiUrl, booking);
  }

  updateBooking(id: number, booking: any): Observable<any> {
    return this.http.put<any>(`${this.apiUrl}/${id}`, booking);
  }

  deleteBooking(id: number): Observable<any> {
    return this.http.delete<any>(`${this.apiUrl}/${id}`);
  }
}


---

2. Booking List Component (booking-list.component.ts)

import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BookingService } from '../booking.service';

@Component({
  selector: 'app-booking-list',
  templateUrl: './booking-list.component.html',
  styleUrls: ['./booking-list.component.css']
})
export class BookingListComponent implements OnInit {
  bookings: any[] = [];

  constructor(
    private bookingService: BookingService,
    private toastr: ToastrService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.loadBookings();
  }

  loadBookings() {
    this.bookingService.getBookings().subscribe(data => {
      this.bookings = data;
    });
  }

  onAddBooking() {
    this.router.navigate(['/booking-form']);
  }

  onEditBooking(id: number) {
    this.router.navigate(['/booking-form', id]);   // ‚úÖ send id in route
  }

  onDeleteBooking(id: number) {
    if (confirm('Are you sure you want to delete this booking?')) {
      this.bookingService.deleteBooking(id).subscribe(() => {
        this.toastr.success('Booking deleted successfully!');
        this.loadBookings();
      });
    }
  }
}

HTML (booking-list.component.html)

<div class="container mt-4">
  <h2>Hotel Table Bookings</h2>
  <button class="btn btn-primary mb-3" (click)="onAddBooking()">Add Booking</button>

  <table class="table table-bordered">
    <thead>
      <tr>
        <th>ID</th>
        <th>Table</th>
        <th>Date</th>
        <th>Guest Name</th>
        <th>Guests</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let booking of bookings">
        <td>{{ booking.id }}</td>
        <td>{{ booking.tableNo }}</td>
        <td>{{ booking.date }}</td>
        <td>{{ booking.firstName }} {{ booking.lastName }}</td>
        <td>{{ booking.guests }}</td>
        <td>
          <button class="btn btn-warning btn-sm me-2" (click)="onEditBooking(booking.id)">Edit</button>
          <button class="btn btn-danger btn-sm" (click)="onDeleteBooking(booking.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>


---

3. Booking Form Component (booking-form.component.ts)

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BookingService } from '../booking.service';

@Component({
  selector: 'app-booking-form',
  templateUrl: './booking-form.component.html',
  styleUrls: ['./booking-form.component.css']
})
export class BookingFormComponent implements OnInit {
  bookingForm!: FormGroup;
  bookingId!: number | null;
  isEdit = false;

  constructor(
    private fb: FormBuilder,
    private bookingService: BookingService,
    private route: ActivatedRoute,
    private router: Router,
    private toastr: ToastrService
  ) {}

  ngOnInit(): void {
    this.bookingForm = this.fb.group({
      tableNo: ['', Validators.required],
      date: ['', Validators.required],
      firstName: ['', Validators.required],
      lastName: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      gender: ['', Validators.required],
      guests: ['', [Validators.required, Validators.min(1)]],
    });

    this.route.paramMap.subscribe(params => {
      const id = params.get('id');
      if (id) {
        this.bookingId = +id;
        this.isEdit = true;
        this.bookingService.getBookingById(this.bookingId).subscribe({
          next: (data) => {
            this.bookingForm.patchValue(data);   // ‚úÖ patch form
          },
          error: () => {
            this.toastr.error('Booking not found');
            this.router.navigate(['/bookings']);
          }
        });
      }
    });
  }

  onSubmit() {
    if (this.bookingForm.invalid) {
      this.toastr.error('Please fill all required fields');
      return;
    }

    if (this.isEdit && this.bookingId) {
      this.bookingService.updateBooking(this.bookingId, this.bookingForm.value).subscribe(() => {
        this.toastr.success('Booking updated successfully!');
        this.router.navigate(['/bookings']);
      });
    } else {
      this.bookingService.addBooking(this.bookingForm.value).subscribe(() => {
        this.toastr.success('Booking added successfully!');
        this.router.navigate(['/bookings']);
      });
    }
  }
}

HTML (booking-form.component.html)

<div class="container mt-4">
  <h2>{{ isEdit ? 'Update Booking' : 'Add Booking' }}</h2>
  <form [formGroup]="bookingForm" (ngSubmit)="onSubmit()">
    
    <div class="mb-3">
      <label>Table No</label>
      <input type="text" class="form-control" formControlName="tableNo">
    </div>

    <div class="mb-3">
      <label>Booking Date</label>
      <input type="date" class="form-control" formControlName="date">
    </div>

    <div class="mb-3">
      <label>First Name</label>
      <input type="text" class="form-control" formControlName="firstName">
    </div>

    <div class="mb-3">
      <label>Last Name</label>
      <input type="text" class="form-control" formControlName="lastName">
    </div>

    <div class="mb-3">
      <label>Email</label>
      <input type="email" class="form-control" formControlName="email">
    </div>

    <div class="mb-3">
      <label>Gender</label>
      <select class="form-control" formControlName="gender">
        <option value="">Select</option>
        <option value="Male">Male</option>
        <option value="Female">Female</option>
      </select>
    </div>

    <div class="mb-3">
      <label>No of Guests</label>
      <input type="number" class="form-control" formControlName="guests">
    </div>

    <button type="submit" class="btn btn-success">
      {{ isEdit ? 'Update' : 'Submit' }}
    </button>
  </form>
</div>


---

4. App Routing (app-routing.module.ts)

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { BookingListComponent } from './booking-list/booking-list.component';
import { BookingFormComponent } from './booking-form/booking-form.component';

const routes: Routes = [
  { path: '', redirectTo: 'bookings', pathMatch: 'full' },
  { path: 'bookings', component: BookingListComponent },
  { path: 'booking-form', component: BookingFormComponent },
  { path: 'booking-form/:id', component: BookingFormComponent },  // ‚úÖ edit route
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}


---

‚úÖ Now:

When you click Edit, the form gets patched with values.

Button label changes between Submit and Update.

‚ÄúBooking not found‚Äù only shows if the id truly doesn‚Äôt exist.



---

Do you want me to also add the login page with guard and link it so that only admin can access bookings?

